Acts as an API to the sql server (i.e. allows one to access data in database)

Here, express is being used which is a framework of Node.js. Node.js is commonly used for 


Chain of command (starting at entry point):
- server.js
- userRoutes.js
- userController.ks
- database.js


// backend/config/db.js

import mysql from 'mysql2';

const db = mysql.createConnection({
    host: 'localhost',
    user: 'your-username',
    password: 'your-password',
    database: 'test_db'
});

db.connect((err) => {
    if (err) {
        console.error('Error connecting to the database:', err);
        return;
    }
    console.log('Connected to the database');
});

export default db;


// backend/controllers/userController.js

import db from '../config/db.js';

export const getUsers = (req, res) => {
    db.query('SELECT * FROM users', (err, results) => {
        if (err) {
            res.status(500).json({ error: 'Error querying the database' });
            return;
        }
        res.json(results);
    });
};


// backend/routes/userRoutes.js

import express from 'express';
import { getUsers } from '../controllers/userController.js';

const router = express.Router();

router.get('/users', getUsers);

export default router;


// backend/server.js

import express from 'express';
import cors from 'cors';
import userRoutes from './routes/userRoutes.js';

const app = express();
const port = 5000;

// Middleware to parse JSON and handle CORS
app.use(express.json());
app.use(cors());

// Use user routes
app.use('/api', userRoutes);

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}/`);
});

